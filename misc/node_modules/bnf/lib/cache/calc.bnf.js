var languageObject = require( "../parser.js" ).LanguageObject;
var i = new languageObject( "calc" );
var r = i.syntaxObject;
i.AddRule( "expression" );
i.AddRule( "number" );
i.AddRule( "type" );
i.AddRule( "_char" );
i.AddRule( "_text" );
i.AddRule( "_digit" );
i.AddRule( "_cr" );
i.AddRule( "_lf" );
i.AddRule( "_crlf" );
i.AddRule( "_htab" );
i.AddRule( "_sp" );
i.AddRule( "_wsp" );
i.AddRule( "_wspchar" );
i.AddRule( "_owsp" );
i.AddRule( "_digits" );
i.AddRule( "_number" );
i.AddRule( "_literal" );
i.AddRule( "_literalSingleQuotes" );
i.AddRule( "_literalDoubleQuotes" );
i.AddRule( "_literalCharSingleQuotes" );
i.AddRule( "_literalCharDoubleQuotes" );
i.AddRule( "_anyLiteralChar" );
i.IndexTokenIdList();
i.WriteRule( "syntax", i.Or( r.expression, i.And( r.expression, r._crlf, r.syntax ) ) );
i.WriteRule( "expression", i.And( r.number, r.type, r.number ) );
i.WriteRule( "number", r._digits );
i.WriteRule( "type", i.Or( "+", "-", "*", "/" ) );
i.WriteRule( "_char", i.Or( i.CharGroup( "A", "Z" ), i.CharGroup( "a", "z" ), "_" ) );
i.WriteRule( "_text", i.Or( r._char, i.And( r._char, r._text ) ) );
i.WriteRule( "_digit", i.Or( i.CharGroup( "0", "9" ) ) );
i.WriteRule( "_cr", "\r" );
i.WriteRule( "_lf", "\n" );
i.WriteRule( "_crlf", i.Or( i.And( r._cr, r._lf ), i.Or( r._cr, r._lf ) ) );
i.WriteRule( "_htab", "\t" );
i.WriteRule( "_sp", " " );
i.WriteRule( "_wsp", i.Or( r._wspchar, i.And( r._wspchar, r._wsp ) ) );
i.WriteRule( "_wspchar", i.Or( r._htab, r._sp ) );
i.WriteRule( "_owsp", i.Or( i.Blank(), r._wsp ) );
i.WriteRule( "_digits", i.Or( r._digit, i.And( r._digit, r._digits ) ) );
i.WriteRule( "_number", i.Or( r.digits, i.And( r.digits, ".", r.digits ) ) );
i.WriteRule( "_literal", i.Or( i.And( "'", r._literalSingleQuotes, "'" ), i.And( '"', r._literalDoubleQuotes, '"' ) ) );
i.WriteRule( "_literalSingleQuotes", i.Or( i.Blank(), r._literalCharSingleQuotes, i.And( r._literalCharSingleQuotes, r._literalSingleQuotes ) ) );
i.WriteRule( "_literalDoubleQuotes", i.Or( i.Blank(), r._literalCharDoubleQuotes, i.And( r._literalCharDoubleQuotes, r._literalDoubleQuotes ) ) );
i.WriteRule( "_literalCharSingleQuotes", i.Or( r._anyLiteralChar, '"', "\\'" ) );
i.WriteRule( "_literalCharDoubleQuotes", i.Or( r._anyLiteralChar, '\\"', "'" ) );
i.WriteRule( "_anyLiteralChar", i.Or( i.CharGroup( " ", "!" ), i.CharGroup( "#", "&" ), i.CharGroup( "(", "[" ), i.CharGroup( "]", "~" ) ) );
exports.interpreter = i;